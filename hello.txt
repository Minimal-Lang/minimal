   Compiling minimal-compiler v0.1.1 (C:\Users\hrudk\Documents\coding\minimal-lang\compiler)
    Finished test [unoptimized + debuginfo] target(s) in 5.43s
     Running unittests src\lib.rs (target\debug\deps\minimal_compiler-344797cced1c0d2d.exe)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests minc/main.rs (target\debug\deps\minc-8530b3f605d77749.exe)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests\test_regular.rs (target\debug\deps\test_regular-3ee81802a88bfba2.exe)

running 1 test
test test_regular ... FAILED

failures:

---- test_regular stdout ----
[tests\test_regular.rs:18] &code[0..3] = [
    '\n',
    '\n',
    '/',
]
[tests\test_regular.rs:19] &test.output = [
    Token {
        value: Whitespace,
        span: 0..1,
    },
    Token {
        value: Whitespace,
        span: 1..2,
    },
    Token {
        value: Comment(
            Comment {
                doc: false,
                block: false,
                content: [
                    ' ',
                    'T',
                    'h',
                    'i',
                    's',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'c',
                    'o',
                    'm',
                    'm',
                    'e',
                    'n',
                    't',
                ],
            },
        ),
        span: 2..22,
    },
    Token {
        value: Whitespace,
        span: 22..23,
    },
    Token {
        value: Whitespace,
        span: 23..24,
    },
    Token {
        value: Comment(
            Comment {
                doc: true,
                block: false,
                content: [
                    ' ',
                    'T',
                    'h',
                    'i',
                    's',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'd',
                    'o',
                    'c',
                    ' ',
                    'c',
                    'o',
                    'm',
                    'm',
                    'e',
                    'n',
                    't',
                ],
            },
        ),
        span: 24..49,
    },
    Token {
        value: Whitespace,
        span: 49..50,
    },
    Token {
        value: Whitespace,
        span: 50..51,
    },
    Token {
        value: Comment(
            Comment {
                doc: false,
                block: true,
                content: [
                    '/',
                    '*',
                    ' ',
                    'T',
                    'h',
                    'i',
                    's',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    '\n',
                    ' ',
                    'b',
                    'l',
                    'o',
                    'c',
                    'k',
                    ' ',
                    'c',
                    'o',
                    'm',
                    'm',
                    'e',
                    'n',
                    't',
                ],
            },
        ),
        span: 51..82,
    },
    Token {
        value: Operator(
            Asterisk,
        ),
        span: 82..84,
    },
    Token {
        value: Operator(
            Slash,
        ),
        span: 83..85,
    },
    Token {
        value: Whitespace,
        span: 84..85,
    },
    Token {
        value: Whitespace,
        span: 85..86,
    },
    Token {
        value: Comment(
            Comment {
                doc: true,
                block: true,
                content: [
                    '*',
                    ' ',
                    'T',
                    'h',
                    'i',
                    's',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    '\n',
                    '*',
                    ' ',
                    'b',
                    'l',
                    'o',
                    'c',
                    'k',
                    ' ',
                    'd',
                    'o',
                    'c',
                    ' ',
                    'c',
                    'o',
                    'm',
                    'm',
                    'e',
                    'nerror',
                    't',
                    '\n',
                    '*',
                ],
            },
        ),
        span: 86..124,
    },
    Token {
        value: Whitespace,
        span: 124..125,
    },
    Token {
        value: Whitespace,
        span: 125..126,
    },
    Token {
        value: Whitespace,
        span: 126..127,
    },
    Token {
        value: Ident(
            Ident {
                value: [
                    'a',
                    'b',
                    'c',
                    'd',
                    'e',
                    'f',
                    'g',
                    'h',
                    'i',
                    'j',
                    'k',
                    'l',
                    'm',
                    'n',
                    'o',
                    'p',
                    'q',
                    'r',
                    's',
                    't',
                    'u',
                    'v',
                    'w',
                    'x',
                    'y',
                    'z',
                    'A',
                    'B',
                    'C',
                    'D',
                    'E',
                    'F',
                    'G',
                    'H',
                    'I',
                    'J',
                    'K',
                    'L',
                    'M',
                    'N',
                    'O',
                    'P',
                    'Q',
                    'R',
                    'S',
                    'T',
                    'U',
                    'V',
                    'W',
                    'Q',
                    'X',
                    'Y',
                    'Z',
                ],
            },
        ),
        span: 127..180,
    },
    Token {
        value: Whitespace,
        span: 180..181,
    },
    Token {
        value: Ident(
            Ident {
                value: [
                    '_',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                ],
            },
        ),
        span: 181..192,
    },
    Token {
        value: Whitespace,
        span: 192..193,
    },
    Token {
        value: Whitespace,
        span: 193..194,
    },
    Token {
        value: Whitespace,
        span: 194..195,
    },
    Token {
        value: Delim(
            Hash,
        ),
        span: 195..196,
    },
    Token {
        value: Delim(
            Comma,
        ),
        span: 196..197,
    },
    Token {
        value: Whitespace,
        span: 197..198,
    },
    Token {
        value: Delim(
            SemiColon,
        ),
        span: 198..199,
    },
    Token {
        value: Delim(
            LParen,
        ),
        span: 199..200,
    },
    Token {
        value: Delim(
            RParen,
        ),
        span: 200..201,
    },
    Token {
        value: Delim(
            LBrace,
        ),
        span: 201..202,
    },
    Token {
        value: Delim(
            RBrace,
        ),
        span: 202..203,
    },
    Token {
        value: Delim(
            LBracket,
        ),
        span: 203..204,
    },
    Token {
        value: Delim(
            RBracket,
        ),
        span: 204..205,
    },
    Token {
        value: Delim(
            Dot,
        ),
        span: 205..206,
    },
    Token {
        value: Delim(
            Colon,
        ),
        span: 206..207,
    },
    Token {
        value: Whitespace,
        span: 207..208,
    },
    Token {
        value: Whitespace,
        span: 208..209,
    },
    Token {
        value: Whitespace,
        span: 209..210,
    },
    Token {
        value: Operator(
            Ampersand,
        ),
        span: 210..212,
    },
    Token {
        value: Whitespace,
        span: 211..212,
    },
    Token {
        value: Operato: test failed, to rerun pass `--test test_regular`r(
            BitAnd,
        ),
        span: 212..214,
    },
    Token {
        value: Whitespace,
        span: 214..215,
    },
    Token {
        value: Operator(
            AmpersandEqual,
        ),
        span: 215..217,
    },
    Token {
        value: Operator(
            Equal,
        ),
        span: 216..217,
    },
    Token {
        value: Whitespace,
        span: 217..218,
    },
    Token {
        value: Operator(
            Pipe,
        ),
        span: 218..220,
    },
    Token {
        value: Whitespace,
        span: 219..220,
    },
    Token {
        value: Operator(
            BitOr,
        ),
        span: 220..222,
    },
    Token {
        value: Whitespace,
        span: 222..223,
    },
    Token {
        value: Operator(
            PipeEqual,
        ),
        span: 223..225,
    },
    Token {
        value: Operator(
            Equal,
        ),
        span: 224..225,
    },
    Token {
        value: Whitespace,
        span: 225..226,
    },
    Token {
        value: Operator(
            At,
        ),
        span: 226..227,
    },
    Token {
        value: Whitespace,
        span: 227..228,
    },
    Token {
        value: Operator(
            Bang,
        ),
        span: 228..230,
    },
    Token {
        value: Whitespace,
        span: 229..230,
    },
    Token {
        value: Operator(
            BangEqual,
        ),
        span: 230..232,
    },
    Token {
        value: Whitespace,
        span: 232..233,
    },
    Token {
        value: Operator(
            QuestionMark,
        ),
        span: 233..234,
    },
    Token {
        value: Whitespace,
        span: 234..235,
    },
    Token {
        value: Ident(
            Ident {
                value: [
                    'x',
                ],
            },
        ),
        span: 235..236,
    },
    Token {
        value: Operator(
            Equal,
        ),
        span: 236..237,
    },
    Token {
        value: Ident(
            Ident {
                value: [
                    'y',
                ],
            },
        ),
        span: 237..238,
    },
    Token {
        value: Whitespace,
        span: 238..239,
    },
    Token {
        value: Operator(
            Plus,
        ),
        span: 239..241,
    },
    Token {
        value: Whitespace,
        span: 240..241,
    },
    Token {
        value: Operator(
            PlusEqual,
        ),
        span: 241..243,
    },
    Token {
        value: Whitespace,
        span: 243..244,
    },
    Token {
        value: Operator(
            Minus,
        ),
        span: 244..246,
    },
    Token {
        value: Whitespace,
        span: 245..246,
    },
    Token {
        value: Operator(
            MinusEqual,
        ),
        span: 246..248,
    },
    Token {
        value: Whitespace,
        span: 248..249,
    },
    Token {
        value: Operator(
            Slash,
        ),
        span: 249..251,
    },
    Token {
        value: Whitespace,
        span: 250..251,
    },
    Token {
        value: Operator(
            SlashEqual,
        ),
        span: 251..253,
    },
    Token {
        value: Whitespace,
        span: 253..254,
    },
    Token {
        value: Operator(
            Asterisk,
        ),
        span: 254..256,
    },
    Token {
        value: Whitespace,
        span: 255..256,
    },
    Token {
        value: Operator(
            AsteriskEqual,
        ),
        span: 256..258,
    },
    Token {
        value: Whitespace,
        span: 258..259,
    },
    Token {
        value: Operator(
            Percent,
        ),
        span: 259..261,
    },
    Token {
        value: Whitespace,
        span: 260..261,
    },
    Token {
        value: Operator(
            PercentEqual,
        ),
        span: 261..263,
    },
    Token {
        value: Whitespace,
        span: 263..264,
    },
    Token {
        value: Operator(
            LessThan,
        ),
        span: 264..266,
    },
    Token {
        value: Whitespace,
        span: 265..26
6,
    },
    Token {
        value: Operator(
            LessThanEqual,
        ),
        span: 266..268,
    },
    Token {
        value: Whitespace,
        span: 268..269,
    },
    Token {
        value: Number(
            Number {
                base: Decimal,
                int_part: [
                    '2',
                    '0',
                    '<',
                    '<',
                    '5',
                    '0',
                    ' ',
                    '>',
                    ' ',
                    '>',
                    '=',
                    ' ',
                    '>',
                    '>',
                    '\n',
                    '\n',
                    '\n',
                    '\'',
                    '\\',
                    '\\',
                    '\'',
                    ' ',
                    '\'',
                    '"',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    '"',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    '0',
                    '\'',
                    '\n',
                    '\n',
                    '\n',
                    '"',
                    '\\',
                    '\\',
                    ' ',
                    '\\',
                    '"',
                    ' ',
                    '\\',
                    '+',
                    ' ',
                    '\'',
                    ' ',
                    '\\',
                    '\'',
                    ' ',
                    '"',
                    '=',
                    '"',
                    '\\',
                    'u',
                    '0',
                    'f',
                    'f',
                    'f',
                    ' ',
                    '\\',
                    'u',
                    '{',
                    '1',
                    '1',
                    '0',
                    '0',
                    '0',
                    '0',
                    '}',
                    ' ',
                    '\\',
                    'x',
                    '0',
                    'F',
                    '"',
                    ',',
                    '"',
                    'ž',
                    'ß',
                    'ö',
                    '"',
                    '\n',
                    '\n',
                    '\n',
                    '\'',
                    '\\',
                    '\\',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    '"',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    '+',
                    '\'',
                    ' ',
                    '\'',
                    '"',
                    '\'',
                    '=',
                    '\'',
                    '\\',
                    'u',
                    '{',
                    '0',
                    'f',
                    'f',
                    'f',
                    '}',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    'u',
                    '{',
                    '1',
                    '1',
                    '0',
                    '0',
                    '0',
                    '0',
                    '}',
                    '\'',
                    ' ',
                    '\'',
                    '\\',
                    '\'',
                    '\'',
                    ',',
                    '\'',
                    'ž',
                    '\'',
                    ' ',
                    '\'',
                    'ß',
                    '\'',
                    ' ',
                    '\'',
                    'ö',
                    '\'',
                    '\n',
                    '\n',
                    '\n',
                    '0',
                    'b',
                    '0',
                    '1',
                    '\n',
                    '0',
                    'o',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '\n',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    '\n',
                    '0',
                    'x',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'A',
                    'B',
                    'c',
                    'd',
                    'E',
                    'F',
                    '\n',
                    '\n',
                    '0',
                    'b',
                    '0',
                    '1',
                    '.',
                    '0',
                    '1',
                    '\n',
                    '0',
                    'o',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '.',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '\n',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    '.',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    '\n',
                    '0',
                    'x',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'A',
                    'B',
                    'c',
                    'd',
                    'E',
                    'F',
                    '.',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'A',
                    'B',
                    'c',
                    'd',
                    'E',
                    'F',
                ],
                fract_part: None,
            },
        ),
        span: 269..551,
    },
]
thread 'test_regular' panicked at 'assertion failed: `(left == right)`
  left: `Token { value: Comment(Comment { doc: false, block: false, content: [' ', 'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'c', 'o', 'm', 'm', 'e', 'n', 't'] }), span: 2..22 }`,
 right: `Token { value: Comment(Comment { doc: false, block: false, content: [' ', 'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'c', 'o', 'm', 'm', 'e', 'n', 't'] }), span: 2..23 }`', tests\test_regular.rs:23:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test_regular

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

